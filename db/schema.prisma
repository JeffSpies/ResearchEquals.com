// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model Module {
  id          Int         @id @default(autoincrement())
  suffix      String      @unique
  title       String      @db.VarChar(300)
  description String?
  license     String?
  type        String
  main        String
  authors     Workspace[]
  parents     Module[]    @relation("ModuleToModule")
  Module      Module?     @relation("ModuleToModule", fields: [moduleId], references: [id])
  moduleId    Int?
}

model Workspace {
  id       Int     @id @default(autoincrement())
  handle   String  @unique
  avatar   String?
  name     String?
  bio      String?
  pronouns String? @db.VarChar(20)
  orcid    String? @unique

  membership Membership[]
  modules    Module[]
}

model Membership {
  id   Int            @id @default(autoincrement())
  role MembershipRole

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  invitedName  String?
  invitedEmail String?

  @@unique([workspaceId, invitedEmail])
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model User {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  name            String?
  email           String     @unique
  emailIsVerified Boolean    @default(false)
  hashedPassword  String?
  role            GlobalRole

  tokens      Token[]
  sessions    Session[]
  memberships Membership[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
enum TokenType {
  RESET_PASSWORD
}
